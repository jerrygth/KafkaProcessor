version: '3.8'
services:
  kafka1:
    image: apache/kafka:4.0.0
    hostname: kafka1
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: CLIENT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: CLIENT://kafka1:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9095,3@kafka3:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_OPTS: "-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent-1.3.0.jar=9101:/opt/jmx-exporter/config.yml"
    volumes:
      - kafka1-data:/var/lib/kafka/data
      - ./config/jmx-exporter:/opt/jmx-exporter
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - kafka-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kafka2:
    image: apache/kafka:4.0.0
    hostname: kafka2
    ports:
      - "9094:9094"  # Client listener (different host port to avoid conflict)
      - "9095:9095"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: CLIENT://0.0.0.0:9094,CONTROLLER://0.0.0.0:9095
      KAFKA_ADVERTISED_LISTENERS: CLIENT://kafka2:9094
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9095,3@kafka3:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_OPTS: "-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent-1.3.0.jar=9102:/opt/jmx-exporter/config.yml"
    volumes:
      - kafka2-data:/var/lib/kafka/data
      - ./config/jmx-exporter:/opt/jmx-exporter
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9094"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - kafka-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kafka3:
    image: apache/kafka:4.0.0
    hostname: kafka3
    ports:
      - "9096:9096"
      - "9097:9097"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: CLIENT://0.0.0.0:9096,CONTROLLER://0.0.0.0:9097
      KAFKA_ADVERTISED_LISTENERS: CLIENT://kafka3:9096
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9095,3@kafka3:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_OPTS: "-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent-1.3.0.jar=9103:/opt/jmx-exporter/config.yml"
    volumes:
      - kafka3-data:/var/lib/kafka/data
      - ./config/jmx-exporter:/opt/jmx-exporter
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9096"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - kafka-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.7.0
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9094,kafka3:9096
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - kafka-network
  topic-creator:
    image: apache/kafka:4.0.0
    command: bash -c "./create-topics.sh"
    volumes:
      - ./config/create-topics.sh:/create-topics.sh
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - kafka-network

  kafka-producer:
    build:
      context: .
      dockerfile: KafkaProducer/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9094,kafka3:9096
      SPRING_KAFKA_PRODUCER_ACKS: all
      SPRING_KAFKA_PRODUCER_RETRIES: 3
      SPRING_KAFKA_PRODUCER_BATCH_SIZE: 16384
      SPRING_KAFKA_PRODUCER_LINGER_MS: 5
      SPRING_KAFKA_PRODUCER_COMPRESSION_TYPE: snappy
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  kafka-consumer:
    build:
      context: .
      dockerfile: KafkaConsumer/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9094,kafka3:9096
      SPRING_KAFKA_CONSUMER_GROUP_ID: demo-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  kafka-streams:
    build:
      context: .
      dockerfile: KafkaStreams/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9094,kafka3:9096
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - kafka-network
    volumes:
      - streams-data:/data/kafka-streams
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - kafka-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  prometheus-data:
  grafana-data:
  streams-data: